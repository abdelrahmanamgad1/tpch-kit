        -:    0:Source:driver.c
        -:    0:Graph:driver.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:* $Id: driver.c,v 1.7 2008/09/24 22:35:21 jms Exp $
        -:    3:*
        -:    4:* Revision History
        -:    5:* ===================
        -:    6:* $Log: driver.c,v $
        -:    7:* Revision 1.7  2008/09/24 22:35:21  jms
        -:    8:* remove build number header
        -:    9:*
        -:   10:* Revision 1.6  2008/09/24 22:30:29  jms
        -:   11:* remove build number from default header
        -:   12:*
        -:   13:* Revision 1.5  2008/03/21 17:38:39  jms
        -:   14:* changes for 2.6.3
        -:   15:*
        -:   16:* Revision 1.4  2006/04/26 23:01:10  jms
        -:   17:* address update generation problems
        -:   18:*
        -:   19:* Revision 1.3  2005/10/28 02:54:35  jms
        -:   20:* add release.h changes
        -:   21:*
        -:   22:* Revision 1.2  2005/01/03 20:08:58  jms
        -:   23:* change line terminations
        -:   24:*
        -:   25:* Revision 1.1.1.1  2004/11/24 23:31:46  jms
        -:   26:* re-establish external server
        -:   27:*
        -:   28:* Revision 1.5  2004/04/07 20:17:29  jms
        -:   29:* bug #58 (join fails between order/lineitem)
        -:   30:*
        -:   31:* Revision 1.4  2004/02/18 16:26:49  jms
        -:   32:* 32/64 bit changes for overflow handling needed additional changes when ported back to windows
        -:   33:*
        -:   34:* Revision 1.3  2004/01/22 05:49:29  jms
        -:   35:* AIX porting (AIX 5.1)
        -:   36:*
        -:   37:* Revision 1.2  2004/01/22 03:54:12  jms
        -:   38:* 64 bit support changes for customer address
        -:   39:*
        -:   40:* Revision 1.1.1.1  2003/08/08 21:50:33  jms
        -:   41:* recreation after CVS crash
        -:   42:*
        -:   43:* Revision 1.3  2003/08/08 21:35:26  jms
        -:   44:* first integration of rng64 for o_custkey and l_partkey
        -:   45:*
        -:   46:* Revision 1.2  2003/08/07 17:58:34  jms
        -:   47:* Convery RNG to 64bit space as preparation for new large scale RNG
        -:   48:*
        -:   49:* Revision 1.1.1.1  2003/04/03 18:54:21  jms
        -:   50:* initial checkin
        -:   51:*
        -:   52:*
        -:   53:*/
        -:   54:/* main driver for dss banchmark */
        -:   55:
        -:   56:#define DECLARER				/* EXTERN references get defined here */
        -:   57:#define NO_FUNC (int (*) ()) NULL	/* to clean up tdefs */
        -:   58:#define NO_LFUNC (long (*) ()) NULL		/* to clean up tdefs */
        -:   59:
        -:   60:#include "config.h"
        -:   61:#include "release.h"
        -:   62:#include <stdlib.h>
        -:   63:#if (defined(_POSIX_)||!defined(WIN32))		/* Change for Windows NT */
        -:   64:#include <unistd.h>
        -:   65:#include <sys/wait.h>
        -:   66:#endif /* WIN32 */
        -:   67:#include <stdio.h>				/* */
        -:   68:#include <limits.h>
        -:   69:#include <math.h>
        -:   70:#include <ctype.h>
        -:   71:#include <signal.h>
        -:   72:#include <string.h>
        -:   73:#include <errno.h>
        -:   74:#ifdef HP
        -:   75:#include <strings.h>
        -:   76:#endif
        -:   77:#if (defined(WIN32)&&!defined(_POSIX_))
        -:   78:#include <process.h>
        -:   79:#pragma warning(disable:4201)
        -:   80:#pragma warning(disable:4214)
        -:   81:#pragma warning(disable:4514)
        -:   82:#define WIN32_LEAN_AND_MEAN
        -:   83:#define NOATOM
        -:   84:#define NOGDICAPMASKS
        -:   85:#define NOMETAFILE
        -:   86:#define NOMINMAX
        -:   87:#define NOMSG
        -:   88:#define NOOPENFILE
        -:   89:#define NORASTEROPS
        -:   90:#define NOSCROLL
        -:   91:#define NOSOUND
        -:   92:#define NOSYSMETRICS
        -:   93:#define NOTEXTMETRIC
        -:   94:#define NOWH
        -:   95:#define NOCOMM
        -:   96:#define NOKANJI
        -:   97:#define NOMCX
        -:   98:#include <windows.h>
        -:   99:#pragma warning(default:4201)
        -:  100:#pragma warning(default:4214)
        -:  101:#endif
        -:  102:
        -:  103:#include "dss.h"
        -:  104:#include "dsstypes.h"
        -:  105:
        -:  106:/*
        -:  107:* Function prototypes
        -:  108:*/
        -:  109:void	usage (void);
        -:  110:void	kill_load (void);
        -:  111:int		pload (int tbl);
        -:  112:void	gen_tbl (int tnum, DSS_HUGE start, DSS_HUGE count, long upd_num);
        -:  113:int		pr_drange (int tbl, DSS_HUGE min, DSS_HUGE cnt, long num);
        -:  114:int		set_files (int t, int pload);
        -:  115:int		partial (int, int);
        -:  116:
        -:  117:
        -:  118:extern int optind, opterr;
        -:  119:extern char *optarg;
        -:  120:DSS_HUGE rowcnt = 0, minrow = 0;
        -:  121:long upd_num = 0;
        -:  122:double flt_scale;
        -:  123:#if (defined(WIN32)&&!defined(_POSIX_))
        -:  124:char *spawn_args[25];
        -:  125:#endif
        -:  126:#ifdef RNG_TEST
        -:  127:extern seed_t Seed[];
        -:  128:#endif
        -:  129:static int bTableSet = 0;
        -:  130:
        -:  131:
        -:  132:/*
        -:  133:* general table descriptions. See dss.h for details on structure
        -:  134:* NOTE: tables with no scaling info are scaled according to
        -:  135:* another table
        -:  136:*
        -:  137:*
        -:  138:* the following is based on the tdef structure defined in dss.h as:
        -:  139:* typedef struct
        -:  140:* {
        -:  141:* char     *name;            -- name of the table; 
        -:  142:*                               flat file output in <name>.tbl
        -:  143:* long      base;            -- base scale rowcount of table; 
        -:  144:*                               0 if derived
        -:  145:* int       (*loader) ();    -- function to present output
        -:  146:* long      (*gen_seed) ();  -- functions to seed the RNG
        -:  147:* int       child;           -- non-zero if there is an associated detail table
        -:  148:* unsigned long vtotal;      -- "checksum" total 
        -:  149:* }         tdef;
        -:  150:*
        -:  151:*/
        -:  152:
        -:  153:/*
        -:  154:* flat file print functions; used with -F(lat) option
        -:  155:*/
        -:  156:int pr_cust (customer_t * c, int mode);
        -:  157:int pr_line (order_t * o, int mode);
        -:  158:int pr_order (order_t * o, int mode);
        -:  159:int pr_part (part_t * p, int mode);
        -:  160:int pr_psupp (part_t * p, int mode);
        -:  161:int pr_supp (supplier_t * s, int mode);
        -:  162:int pr_order_line (order_t * o, int mode);
        -:  163:int pr_part_psupp (part_t * p, int mode);
        -:  164:int pr_nation (code_t * c, int mode);
        -:  165:int pr_region (code_t * c, int mode);
        -:  166:
        -:  167:/*
        -:  168:* seed generation functions; used with '-O s' option
        -:  169:*/
        -:  170:long sd_cust (int child, DSS_HUGE skip_count);
        -:  171:long sd_line (int child, DSS_HUGE skip_count);
        -:  172:long sd_order (int child, DSS_HUGE skip_count);
        -:  173:long sd_part (int child, DSS_HUGE skip_count);
        -:  174:long sd_psupp (int child, DSS_HUGE skip_count);
        -:  175:long sd_supp (int child, DSS_HUGE skip_count);
        -:  176:long sd_order_line (int child, DSS_HUGE skip_count);
        -:  177:long sd_part_psupp (int child, DSS_HUGE skip_count);
        -:  178:
        -:  179:tdef tdefs[] =
        -:  180:{
        -:  181:	{"part.tbl", "part table", 200000,
        -:  182:		pr_part, sd_part, PSUPP, 0},
        -:  183:	{"partsupp.tbl", "partsupplier table", 200000,
        -:  184:		pr_psupp, sd_psupp, NONE, 0},
        -:  185:	{"supplier.tbl", "suppliers table", 10000,
        -:  186:		pr_supp, sd_supp, NONE, 0},
        -:  187:	{"customer.tbl", "customers table", 150000,
        -:  188:		pr_cust, sd_cust, NONE, 0},
        -:  189:	{"orders.tbl", "order table", 150000,
        -:  190:		pr_order, sd_order, LINE, 0},
        -:  191:	{"lineitem.tbl", "lineitem table", 150000,
        -:  192:		pr_line, sd_line, NONE, 0},
        -:  193:	{"orders.tbl", "orders/lineitem tables", 150000,
        -:  194:		pr_order_line, sd_order, LINE, 0},
        -:  195:	{"part.tbl", "part/partsupplier tables", 200000,
        -:  196:		pr_part_psupp, sd_part, PSUPP, 0},
        -:  197:	{"nation.tbl", "nation table", NATIONS_MAX,
        -:  198:		pr_nation, NO_LFUNC, NONE, 0},
        -:  199:	{"region.tbl", "region table", NATIONS_MAX,
        -:  200:		pr_region, NO_LFUNC, NONE, 0},
        -:  201:};
        -:  202:
        -:  203:/*
        -:  204:* re-set default output file names 
        -:  205:*/
        -:  206:int
    #####:  207:set_files (int i, int pload)
        -:  208:{
        -:  209:	char line[80], *new_name;
        -:  210:	
    #####:  211:	if (table & (1 << i))
        -:  212:child_table:
        -:  213:	{
    #####:  214:		if (pload != -1)
    #####:  215:			sprintf (line, "%s.%d", tdefs[i].name, pload);
        -:  216:		else
        -:  217:		{
    #####:  218:			printf ("Enter new destination for %s data: ",
    #####:  219:				tdefs[i].name);
    #####:  220:			if (fgets (line, sizeof (line), stdin) == NULL)
    #####:  221:				return (-1);;
    #####:  222:			if ((new_name = strchr (line, '\n')) != NULL)
    #####:  223:				*new_name = '\0';
    #####:  224:			if ((int)strlen (line) == 0)
    #####:  225:				return (0);
        -:  226:		}
    #####:  227:		new_name = (char *) malloc ((int)strlen (line) + 1);
    #####:  228:		MALLOC_CHECK (new_name);
    #####:  229:		strcpy (new_name, line);
    #####:  230:		tdefs[i].name = new_name;
    #####:  231:		if (tdefs[i].child != NONE)
        -:  232:		{
    #####:  233:			i = tdefs[i].child;
    #####:  234:			tdefs[i].child = NONE;
    #####:  235:			goto child_table;
        -:  236:		}
    #####:  237:	}
        -:  238:	
    #####:  239:	return (0);
    #####:  240:}
        -:  241:
        -:  242:
        -:  243:
        -:  244:/*
        -:  245:* read the distributions needed in the benchamrk
        -:  246:*/
        -:  247:void
    #####:  248:load_dists (void)
        -:  249:{
    #####:  250:	read_dist (env_config (DIST_TAG, DIST_DFLT), "p_cntr", &p_cntr_set);
    #####:  251:	read_dist (env_config (DIST_TAG, DIST_DFLT), "colors", &colors);
    #####:  252:	read_dist (env_config (DIST_TAG, DIST_DFLT), "p_types", &p_types_set);
    #####:  253:	read_dist (env_config (DIST_TAG, DIST_DFLT), "nations", &nations);
    #####:  254:	read_dist (env_config (DIST_TAG, DIST_DFLT), "regions", &regions);
    #####:  255:	read_dist (env_config (DIST_TAG, DIST_DFLT), "o_oprio",
        -:  256:		&o_priority_set);
    #####:  257:	read_dist (env_config (DIST_TAG, DIST_DFLT), "instruct",
        -:  258:		&l_instruct_set);
    #####:  259:	read_dist (env_config (DIST_TAG, DIST_DFLT), "smode", &l_smode_set);
    #####:  260:	read_dist (env_config (DIST_TAG, DIST_DFLT), "category",
        -:  261:		&l_category_set);
    #####:  262:	read_dist (env_config (DIST_TAG, DIST_DFLT), "rflag", &l_rflag_set);
    #####:  263:	read_dist (env_config (DIST_TAG, DIST_DFLT), "msegmnt", &c_mseg_set);
        -:  264:
        -:  265:	/* load the distributions that contain text generation */
    #####:  266:	read_dist (env_config (DIST_TAG, DIST_DFLT), "nouns", &nouns);
    #####:  267:	read_dist (env_config (DIST_TAG, DIST_DFLT), "verbs", &verbs);
    #####:  268:	read_dist (env_config (DIST_TAG, DIST_DFLT), "adjectives", &adjectives);
    #####:  269:	read_dist (env_config (DIST_TAG, DIST_DFLT), "adverbs", &adverbs);
    #####:  270:	read_dist (env_config (DIST_TAG, DIST_DFLT), "auxillaries", &auxillaries);
    #####:  271:	read_dist (env_config (DIST_TAG, DIST_DFLT), "terminators", &terminators);
    #####:  272:	read_dist (env_config (DIST_TAG, DIST_DFLT), "articles", &articles);
    #####:  273:	read_dist (env_config (DIST_TAG, DIST_DFLT), "prepositions", &prepositions);
    #####:  274:	read_dist (env_config (DIST_TAG, DIST_DFLT), "grammar", &grammar);
    #####:  275:	read_dist (env_config (DIST_TAG, DIST_DFLT), "np", &np);
    #####:  276:	read_dist (env_config (DIST_TAG, DIST_DFLT), "vp", &vp);
        -:  277:	
    #####:  278:}
        -:  279:
        -:  280:/*
        -:  281:* generate a particular table
        -:  282:*/
        -:  283:void
    #####:  284:gen_tbl (int tnum, DSS_HUGE start, DSS_HUGE count, long upd_num)
        -:  285:{
        -:  286:	static order_t o;
        -:  287:	supplier_t supp;
        -:  288:	customer_t cust;
        -:  289:	part_t part;
        -:  290:	code_t code;
        -:  291:	static int completed = 0;
        -:  292:	DSS_HUGE i;
        -:  293:
    #####:  294:	DSS_HUGE rows_per_segment=0;
    #####:  295:	DSS_HUGE rows_this_segment=-1;
    #####:  296:	DSS_HUGE residual_rows=0;
        -:  297:
    #####:  298:	if (insert_segments)
        -:  299:		{
    #####:  300:		rows_per_segment = count / insert_segments;
    #####:  301:		residual_rows = count - (rows_per_segment * insert_segments);
    #####:  302:		}
        -:  303:
    #####:  304:	for (i = start; count; count--, i++)
        -:  305:	{
    #####:  306:		LIFENOISE (1000, i);
    #####:  307:		row_start(tnum);
        -:  308:
    #####:  309:		switch (tnum)
        -:  310:		{
        -:  311:		case LINE:
        -:  312:		case ORDER:
        -:  313:  		case ORDER_LINE: 
    #####:  314:			mk_order (i, &o, upd_num % 10000);
        -:  315:
    #####:  316:		  if (insert_segments  && (upd_num > 0))
    #####:  317:			if((upd_num / 10000) < residual_rows)
        -:  318:				{
    #####:  319:				if((++rows_this_segment) > rows_per_segment) 
        -:  320:					{						
    #####:  321:					rows_this_segment=0;
    #####:  322:					upd_num += 10000;					
    #####:  323:					}
    #####:  324:				}
        -:  325:			else
        -:  326:				{
    #####:  327:				if((++rows_this_segment) >= rows_per_segment) 
        -:  328:					{
    #####:  329:					rows_this_segment=0;
    #####:  330:					upd_num += 10000;
    #####:  331:					}
        -:  332:				}
        -:  333:
    #####:  334:			if (set_seeds == 0)
    #####:  335:				tdefs[tnum].loader(&o, upd_num);
    #####:  336:			break;
        -:  337:		case SUPP:
    #####:  338:			mk_supp (i, &supp);
    #####:  339:			if (set_seeds == 0)
    #####:  340:				tdefs[tnum].loader(&supp, upd_num);
    #####:  341:			break;
        -:  342:		case CUST:
    #####:  343:			mk_cust (i, &cust);
    #####:  344:			if (set_seeds == 0)
    #####:  345:				tdefs[tnum].loader(&cust, upd_num);
    #####:  346:			break;
        -:  347:		case PSUPP:
        -:  348:		case PART:
        -:  349:  		case PART_PSUPP: 
    #####:  350:			mk_part (i, &part);
    #####:  351:			if (set_seeds == 0)
    #####:  352:				tdefs[tnum].loader(&part, upd_num);
    #####:  353:			break;
        -:  354:		case NATION:
    #####:  355:			mk_nation (i, &code);
    #####:  356:			if (set_seeds == 0)
    #####:  357:				tdefs[tnum].loader(&code, 0);
    #####:  358:			break;
        -:  359:		case REGION:
    #####:  360:			mk_region (i, &code);
    #####:  361:			if (set_seeds == 0)
    #####:  362:				tdefs[tnum].loader(&code, 0);
    #####:  363:			break;
        -:  364:		}
    #####:  365:		row_stop(tnum);
    #####:  366:		if (set_seeds && (i % tdefs[tnum].base) < 2)
        -:  367:		{
    #####:  368:			printf("\nSeeds for %s at rowcount %ld\n", tdefs[tnum].comment, i);
    #####:  369:			dump_seeds(tnum);
    #####:  370:		}
    #####:  371:	}
    #####:  372:	completed |= 1 << tnum;
    #####:  373:}
        -:  374:
        -:  375:
        -:  376:
        -:  377:void
    #####:  378:usage (void)
        -:  379:{
    #####:  380:	fprintf (stderr, "%s\n%s\n\t%s\n%s %s\n\n",
        -:  381:		"USAGE:",
        -:  382:		"dbgen [-{vf}][-T {pcsoPSOL}]",
        -:  383:		"[-s <scale>][-C <procs>][-S <step>]",
        -:  384:		"dbgen [-v] [-O m] [-s <scale>]",
        -:  385:		"[-U <updates>]");
    #####:  386:	fprintf (stderr, "Basic Options\n===========================\n");
    #####:  387:	fprintf (stderr, "-C <n> -- separate data set into <n> chunks (requires -S, default: 1)\n");
    #####:  388:	fprintf (stderr, "-f     -- force. Overwrite existing files\n");
    #####:  389:	fprintf (stderr, "-h     -- display this message\n");
    #####:  390:	fprintf (stderr, "-q     -- enable QUIET mode\n");
    #####:  391:	fprintf (stderr, "-s <n> -- set Scale Factor (SF) to  <n> (default: 1) \n");
    #####:  392:	fprintf (stderr, "-S <n> -- build the <n>th step of the data/update set (used with -C or -U)\n");
    #####:  393:	fprintf (stderr, "-U <n> -- generate <n> update sets\n");
    #####:  394:	fprintf (stderr, "-v     -- enable VERBOSE mode\n");
    #####:  395:	fprintf (stderr, "-z     -- output to stdout\n");
    #####:  396:	fprintf (stderr, "\nAdvanced Options\n===========================\n");
    #####:  397:	fprintf (stderr, "-b <s> -- load distributions for <s> (default: dists.dss)\n");
    #####:  398:    fprintf (stderr, "-d <n> -- split deletes between <n> files (requires -U)\n");
    #####:  399:    fprintf (stderr, "-i <n> -- split inserts between <n> files (requires -U)\n");
    #####:  400:	fprintf (stderr, "-T c   -- generate cutomers ONLY\n");
    #####:  401:	fprintf (stderr, "-T l   -- generate nation/region ONLY\n");
    #####:  402:	fprintf (stderr, "-T L   -- generate lineitem ONLY\n");
    #####:  403:	fprintf (stderr, "-T n   -- generate nation ONLY\n");
    #####:  404:	fprintf (stderr, "-T o   -- generate orders/lineitem ONLY\n");
    #####:  405:	fprintf (stderr, "-T O   -- generate orders ONLY\n");
    #####:  406:	fprintf (stderr, "-T p   -- generate parts/partsupp ONLY\n");
    #####:  407:	fprintf (stderr, "-T P   -- generate parts ONLY\n");
    #####:  408:	fprintf (stderr, "-T r   -- generate region ONLY\n");
    #####:  409:	fprintf (stderr, "-T s   -- generate suppliers ONLY\n");
    #####:  410:	fprintf (stderr, "-T S   -- generate partsupp ONLY\n");
    #####:  411:	fprintf (stderr,
        -:  412:		"\nTo generate the SF=1 (1GB), validation database population, use:\n");
    #####:  413:	fprintf (stderr, "\tdbgen -vf -s 1\n");
    #####:  414:	fprintf (stderr, "\nTo generate updates for a SF=1 (1GB), use:\n");
    #####:  415:	fprintf (stderr, "\tdbgen -v -U 1 -s 1\n");
    #####:  416:}
        -:  417:
        -:  418:/*
        -:  419:* int partial(int tbl, int s) -- generate the s-th part of the named tables data
        -:  420:*/
        -:  421:int
    #####:  422:partial (int tbl, int s)
        -:  423:{
        -:  424:	DSS_HUGE rowcnt;
        -:  425:	DSS_HUGE extra;
        -:  426:	
    #####:  427:	if (verbose > 0)
        -:  428:	{
    #####:  429:		fprintf (stderr, "\tStarting to load stage %d of %ld for %s...",
    #####:  430:			s, children, tdefs[tbl].comment);
    #####:  431:	}
        -:  432:	
    #####:  433:	set_files (tbl, s);
        -:  434:	
    #####:  435:	rowcnt = set_state(tbl, scale, children, s, &extra);
        -:  436:
    #####:  437:	if (s == children)
    #####:  438:		gen_tbl (tbl, rowcnt * (s - 1) + 1, rowcnt + extra, upd_num);
        -:  439:	else
    #####:  440:		gen_tbl (tbl, rowcnt * (s - 1) + 1, rowcnt, upd_num);
        -:  441:	
    #####:  442:	if (verbose > 0)
    #####:  443:		fprintf (stderr, "done.\n");
        -:  444:	
    #####:  445:	return (0);
        -:  446:}
        -:  447:
        -:  448:void
    #####:  449:process_options (int count, char **vector)
        -:  450:{
        -:  451:	int option;
        -:  452:	FILE *pF;
        -:  453:	
    #####:  454:	while ((option = getopt (count, vector,
    #####:  455:		"b:C:d:fi:hO:P:qs:S:T:U:vz")) != -1)
    #####:  456:	switch (option)
        -:  457:	{
        -:  458:		case 'b':				/* load distributions from named file */
    #####:  459:			d_path = (char *)malloc((int)strlen(optarg) + 1);
    #####:  460:			MALLOC_CHECK(d_path);
    #####:  461:			strcpy(d_path, optarg);
    #####:  462:			if ((pF = fopen(d_path, "r")) == NULL)
        -:  463:			{
    #####:  464:				fprintf(stderr, "ERROR: Invalid argument to -b");
    #####:  465:				exit(-1);
        -:  466:			}
        -:  467:			else
    #####:  468:				fclose(pF);
        -:  469:
    #####:  470:			break;
        -:  471:		case 'C':
    #####:  472:			children = atoi (optarg);
    #####:  473:			break;
        -:  474:		case 'd':
    #####:  475:			delete_segments = atoi (optarg);
    #####:  476:			break;
        -:  477:		case 'f':				/* blind overwrites; Force */
    #####:  478:			force = 1;
    #####:  479:			break;
        -:  480:		case 'i':
    #####:  481:			insert_segments = atoi (optarg);
    #####:  482:			break;
        -:  483:		case 'q':				/* all prompts disabled */
    #####:  484:			verbose = -1;
    #####:  485:			break;
        -:  486:		case 's':				/* scale by Percentage of base rowcount */
        -:  487:		case 'P':				/* for backward compatibility */
    #####:  488:			flt_scale = atof (optarg);
    #####:  489:			if (flt_scale < MIN_SCALE)
        -:  490:			{
        -:  491:				int i;
        -:  492:				int int_scale;
        -:  493:
    #####:  494:				scale = 1;
    #####:  495:				int_scale = (int)(1000 * flt_scale);
    #####:  496:				for (i = PART; i < REGION; i++)
        -:  497:				{
    #####:  498:					tdefs[i].base = (DSS_HUGE)(int_scale * tdefs[i].base)/1000;
    #####:  499:					if (tdefs[i].base < 1)
    #####:  500:						tdefs[i].base = 1;
    #####:  501:				}
    #####:  502:			}
        -:  503:			else
    #####:  504:				scale = (long) flt_scale;
    #####:  505:			if (scale > MAX_SCALE)
        -:  506:			{
    #####:  507:				fprintf (stderr, "%s %5.0f %s\n\t%s\n\n",
        -:  508:					"NOTE: Data generation for scale factors >",
        -:  509:					MAX_SCALE,
        -:  510:					"GB is still in development,",
        -:  511:					"and is not yet supported.\n");
    #####:  512:				fprintf (stderr,
        -:  513:					"Your resulting data set MAY NOT BE COMPLIANT!\n");
    #####:  514:			}
    #####:  515:			break;
        -:  516:		case 'S':				/* generate a particular STEP */
    #####:  517:			step = atoi (optarg);
    #####:  518:			break;
        -:  519:		case 'U':				/* generate flat files for update stream */
    #####:  520:			updates = atoi (optarg);
    #####:  521:			break;
        -:  522:		case 'v':				/* life noises enabled */
    #####:  523:			verbose = 1;
    #####:  524:			break;
        -:  525:		case 'z':				/* output to stdout */
    #####:  526:			zstdout = 1;
    #####:  527:			break;
        -:  528:		case 'T':				/* generate a specifc table */
    #####:  529:			switch (*optarg)
        -:  530:			{
        -:  531:			case 'c':			/* generate customer ONLY */
    #####:  532:				table = 1 << CUST;
    #####:  533:				bTableSet = 1;
    #####:  534:				break;
        -:  535:			case 'L':			/* generate lineitems ONLY */
    #####:  536:				table = 1 << LINE;
    #####:  537:				bTableSet = 1;
    #####:  538:				break;
        -:  539:			case 'l':			/* generate code table ONLY */
    #####:  540:				table = 1 << NATION;
    #####:  541:				table |= 1 << REGION;
    #####:  542:				bTableSet = 1;
    #####:  543:				break;
        -:  544:			case 'n':			/* generate nation table ONLY */
    #####:  545:				table = 1 << NATION;
    #####:  546:				bTableSet = 1;
    #####:  547:				break;
        -:  548:			case 'O':			/* generate orders ONLY */
    #####:  549:				table = 1 << ORDER;
    #####:  550:				bTableSet = 1;
    #####:  551:				break;
        -:  552:			case 'o':			/* generate orders/lineitems ONLY */
    #####:  553:				table = 1 << ORDER_LINE;
    #####:  554:				bTableSet = 1;
    #####:  555:				break;
        -:  556:			case 'P':			/* generate part ONLY */
    #####:  557:				table = 1 << PART;
    #####:  558:				bTableSet = 1;
    #####:  559:				break;
        -:  560:			case 'p':			/* generate part/partsupp ONLY */
    #####:  561:				table = 1 << PART_PSUPP;
    #####:  562:				bTableSet = 1;
    #####:  563:				break;
        -:  564:			case 'r':			/* generate region table ONLY */
    #####:  565:				table = 1 << REGION;
    #####:  566:				bTableSet = 1;
    #####:  567:				break;
        -:  568:			case 'S':			/* generate partsupp ONLY */
    #####:  569:				table = 1 << PSUPP;
    #####:  570:				bTableSet = 1;
    #####:  571:				break;
        -:  572:			case 's':			/* generate suppliers ONLY */
    #####:  573:				table = 1 << SUPP;
    #####:  574:				bTableSet = 1;
    #####:  575:				break;
        -:  576:			default:
    #####:  577:				fprintf (stderr, "Unknown table name %s\n",
    #####:  578:					optarg);
    #####:  579:				usage ();
    #####:  580:				exit (1);
        -:  581:			}
    #####:  582:			break;
        -:  583:		case 'O':				/* optional actions */
    #####:  584:			switch (tolower (*optarg))
        -:  585:			{
        -:  586:			case 's':			/* calibrate the RNG usage */
    #####:  587:				set_seeds = 1;
    #####:  588:				break;
        -:  589:			default:
    #####:  590:				fprintf (stderr, "Unknown option name %s\n",
    #####:  591:					optarg);
    #####:  592:				usage ();
    #####:  593:				exit (1);
        -:  594:			}
    #####:  595:			break;
        -:  596:		default:
    #####:  597:			printf ("ERROR: option '%c' unknown.\n",
    #####:  598:				*(vector[optind] + 1));
        -:  599:		case 'h':				/* something unexpected */
    #####:  600:			fprintf (stderr,
        -:  601:				"%s Population Generator (Version %d.%d.%d build %d)\n",
        -:  602:				NAME, VERSION, RELEASE, PATCH, BUILD);
    #####:  603:			fprintf (stderr, "Copyright %s %s\n", TPC, C_DATES);
    #####:  604:			usage ();
    #####:  605:			exit (1);
        -:  606:	}
        -:  607:
    #####:  608:	return;
        -:  609:}
        -:  610:
    #####:  611:void validate_options(void)
        -:  612:{
        -:  613:	// DBGenOptions, 3.1
    #####:  614:	if (children != 1)
        -:  615:	{
    #####:  616:		if (updates != 0)
        -:  617:		{
    #####:  618:			fprintf(stderr, "ERROR: -C is not valid when generating updates\n");
    #####:  619:			exit(-1);
        -:  620:		}
    #####:  621:		if (step == -1)
        -:  622:		{
    #####:  623:			fprintf(stderr, "ERROR: -S must be specified when generating data in multiple chunks\n");
    #####:  624:			exit(-1);
        -:  625:		}
    #####:  626:	}
        -:  627:
        -:  628:	// DBGenOptions, 3.3
    #####:  629:	if (updates == 0)
        -:  630:	{
    #####:  631:		if ((insert_segments != 0) || (delete_segments != 0))
        -:  632:		{
    #####:  633:			fprintf(stderr, "ERROR: -d/-i are only valid when generating updates\n");
    #####:  634:			exit(-1);
        -:  635:		}
    #####:  636:	}
        -:  637:
        -:  638:	// DBGenOptions, 3.9
    #####:  639:	if (step != -1)
        -:  640:	{
    #####:  641:		if ((children == 1) && (updates == 0))
        -:  642:		{
    #####:  643:			fprintf(stderr, "ERROR: -S is only valid when generating data in multiple chunks or generating updates\n");
    #####:  644:			exit(-1);
        -:  645:		}
    #####:  646:	}
        -:  647:
        -:  648:	// DBGenOptions, 3.10
    #####:  649:	if (bTableSet && (updates != 0))
        -:  650:	{
    #####:  651:		fprintf(stderr, "ERROR: -T not valid when generating updates\n");
    #####:  652:		exit(-1);
        -:  653:	}
        -:  654:
    #####:  655:	return;
        -:  656:}
        -:  657:
        -:  658:
        -:  659:/*
        -:  660:* MAIN
        -:  661:*
        -:  662:* assumes the existance of getopt() to clean up the command 
        -:  663:* line handling
        -:  664:*/
        -:  665:int
    #####:  666:main (int ac, char **av)
        -:  667:{
        -:  668:	DSS_HUGE i;
        -:  669:	
    #####:  670:	table = (1 << CUST) |
        -:  671:		(1 << SUPP) |
        -:  672:		(1 << NATION) |
        -:  673:		(1 << REGION) |
        -:  674:		(1 << PART_PSUPP) |
        -:  675:		(1 << ORDER_LINE);
    #####:  676:	force = 0;
    #####:  677:    insert_segments=0;
    #####:  678:    delete_segments=0;
    #####:  679:    insert_orders_segment=0;
    #####:  680:    insert_lineitem_segment=0;
    #####:  681:    delete_segment=0;
    #####:  682:	verbose = 0;
    #####:  683:	set_seeds = 0;
    #####:  684:	scale = 1;
    #####:  685:	flt_scale = 1.0;
    #####:  686:	updates = 0;
    #####:  687:	step = -1;
    #####:  688:	tdefs[ORDER].base *=
        -:  689:		ORDERS_PER_CUST;			/* have to do this after init */
    #####:  690:	tdefs[LINE].base *=
        -:  691:		ORDERS_PER_CUST;			/* have to do this after init */
    #####:  692:	tdefs[ORDER_LINE].base *=
        -:  693:		ORDERS_PER_CUST;			/* have to do this after init */
    #####:  694:	children = 1;
    #####:  695:	d_path = NULL;
        -:  696:	
        -:  697:#ifdef NO_SUPPORT
        -:  698:	signal (SIGINT, exit);
        -:  699:#endif /* NO_SUPPORT */
    #####:  700:	process_options (ac, av);
    #####:  701:	validate_options();
        -:  702:#if (defined(WIN32)&&!defined(_POSIX_))
        -:  703:	for (i = 0; i < ac; i++)
        -:  704:	{
        -:  705:		spawn_args[i] = malloc (((int)strlen (av[i]) + 1) * sizeof (char));
        -:  706:		MALLOC_CHECK (spawn_args[i]);
        -:  707:		strcpy (spawn_args[i], av[i]);
        -:  708:	}
        -:  709:	spawn_args[ac] = NULL;
        -:  710:#endif
        -:  711:	
    #####:  712:	if (verbose >= 0)
        -:  713:		{
    #####:  714:		fprintf (stderr,
        -:  715:			"%s Population Generator (Version %d.%d.%d)\n",
        -:  716:			NAME, VERSION, RELEASE, PATCH);
    #####:  717:		fprintf (stderr, "Copyright %s %s\n", TPC, C_DATES);
    #####:  718:		}
        -:  719:	
    #####:  720:	load_dists ();
        -:  721:#ifdef RNG_TEST
    #####:  722:	for (i=0; i <= MAX_STREAM; i++)
    #####:  723:		Seed[i].nCalls = 0;
        -:  724:#endif
        -:  725:	/* have to do this after init */
    #####:  726:	tdefs[NATION].base = nations.count;
    #####:  727:	tdefs[REGION].base = regions.count;
        -:  728:	
        -:  729:	/* 
        -:  730:	* updates are never parallelized 
        -:  731:	*/
    #####:  732:	if (updates)
        -:  733:		{
        -:  734:		/* 
        -:  735:		 * set RNG to start generating rows beyond SF=scale
        -:  736:		 */
    #####:  737:		set_state (ORDER, scale, 100, 101, &i); 
    #####:  738:		rowcnt = (int)(tdefs[ORDER_LINE].base / 10000 * scale * UPD_PCT);
    #####:  739:		if (step > 0)
        -:  740:			{
        -:  741:			/* 
        -:  742:			 * adjust RNG for any prior update generation
        -:  743:			 */
    #####:  744:	      for (i=1; i < step; i++)
        -:  745:         {
    #####:  746:			sd_order(0, rowcnt);
    #####:  747:			sd_line(0, rowcnt);
    #####:  748:         }
    #####:  749:			upd_num = step - 1;
    #####:  750:			}
        -:  751:		else
    #####:  752:			upd_num = 0;
        -:  753:
    #####:  754:		while (upd_num < updates)
        -:  755:			{
    #####:  756:			if (verbose > 0)
    #####:  757:				fprintf (stderr,
        -:  758:				"Generating update pair #%ld for %s",
    #####:  759:				upd_num + 1, tdefs[ORDER_LINE].comment);
    #####:  760:			insert_orders_segment=0;
    #####:  761:			insert_lineitem_segment=0;
    #####:  762:			delete_segment=0;
    #####:  763:			minrow = upd_num * rowcnt + 1;
    #####:  764:			gen_tbl (ORDER_LINE, minrow, rowcnt, upd_num + 1);
    #####:  765:			if (verbose > 0)
    #####:  766:				fprintf (stderr, "done.\n");
    #####:  767:			pr_drange (ORDER_LINE, minrow, rowcnt, upd_num + 1);
    #####:  768:			upd_num++;
        -:  769:			}
        -:  770:
    #####:  771:		exit (0);
        -:  772:		}
        -:  773:	
        -:  774:	/**
        -:  775:	** actual data generation section starts here
        -:  776:	**/
        -:  777:
        -:  778:	/*
        -:  779:	* traverse the tables, invoking the appropriate data generation routine for any to be built
        -:  780:	*/
    #####:  781:	for (i = PART; i <= REGION; i++)
    #####:  782:		if (table & (1 << i))
        -:  783:		{
    #####:  784:			if (children > 1 && i < NATION)
        -:  785:			{
    #####:  786:				partial ((int)i, step);
    #####:  787:			}
        -:  788:			else
        -:  789:			{
    #####:  790:				minrow = 1;
    #####:  791:				if (i < NATION)
    #####:  792:					rowcnt = tdefs[i].base * scale;
        -:  793:				else
    #####:  794:					rowcnt = tdefs[i].base;
    #####:  795:				if (verbose > 0)
    #####:  796:					fprintf (stderr, "Generating data for %s", tdefs[i].comment);
    #####:  797:				gen_tbl ((int)i, minrow, rowcnt, upd_num);
    #####:  798:				if (verbose > 0)
    #####:  799:					fprintf (stderr, "done.\n");
        -:  800:			}
    #####:  801:		}
        -:  802:			
    #####:  803:		return (0);
        -:  804:}
